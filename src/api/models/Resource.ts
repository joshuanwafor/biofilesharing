/* tslint:disable */
/* eslint-disable */
/**
 * tollgator-core
 * Full api description goes here
 *
 * The version of the OpenAPI document: 1.0
 * Contact: joshuanwafor01@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ResourceAttachment,
    ResourceAttachmentFromJSON,
    ResourceAttachmentFromJSONTyped,
    ResourceAttachmentToJSON,
} from './ResourceAttachment';

/**
 * 
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    updatedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    publisherId?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    type?: ResourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    body?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    categories?: string;
    /**
     * 
     * @type {ResourceAttachment}
     * @memberof Resource
     */
    attachment?: ResourceAttachment | null;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    courseId?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    ?: string;
}

/**
* @export
* @enum {string}
*/
export enum ResourceTypeEnum {
    Note = 'note',
    Video = 'video',
    Document = 'document',
    Mixed = 'mixed'
}

export function ResourceFromJSON(json: any): Resource {
    return ResourceFromJSONTyped(json, false);
}

export function ResourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Resource {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'createdAt': !exists(json, 'created_at') ? undefined : json['created_at'],
        'updatedAt': !exists(json, 'updated_at') ? undefined : json['updated_at'],
        'publisherId': !exists(json, 'publisher_id') ? undefined : json['publisher_id'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'body': !exists(json, 'body') ? undefined : json['body'],
        'categories': !exists(json, 'categories') ? undefined : json['categories'],
        'attachment': !exists(json, 'attachment') ? undefined : ResourceAttachmentFromJSON(json['attachment']),
        'courseId': !exists(json, 'course_id') ? undefined : json['course_id'],
        '': !exists(json, '') ? undefined : json[''],
    };
}

export function ResourceToJSON(value?: Resource | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': value.createdAt,
        'updated_at': value.updatedAt,
        'publisher_id': value.publisherId,
        'type': value.type,
        'status': value.status,
        'title': value.title,
        'body': value.body,
        'categories': value.categories,
        'attachment': ResourceAttachmentToJSON(value.attachment),
        'course_id': value.courseId,
        '': value.,
    };
}

