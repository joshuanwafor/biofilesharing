/* tslint:disable */
/* eslint-disable */
/**
 * tollgator-core
 * Full api description goes here
 *
 * The version of the OpenAPI document: 1.0
 * Contact: joshuanwafor01@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    UserAddress,
    UserAddressFromJSON,
    UserAddressFromJSONTyped,
    UserAddressToJSON,
} from './UserAddress';
import {
    UserPaystackBankIntegration,
    UserPaystackBankIntegrationFromJSON,
    UserPaystackBankIntegrationFromJSONTyped,
    UserPaystackBankIntegrationToJSON,
} from './UserPaystackBankIntegration';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * Unique identifier for the given user.
     * @type {number}
     * @memberof User
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    firstName?: Date;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * Set to true if the user's email has been verified.
     * @type {boolean}
     * @memberof User
     */
    verified?: boolean;
    /**
     * The date that the user was created.
     * @type {Date}
     * @memberof User
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    fuid?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    accountStatus?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    bio?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    photo?: string;
    /**
     * 
     * @type {UserPaystackBankIntegration}
     * @memberof User
     */
    paystackBankIntegration?: UserPaystackBankIntegration;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    phone?: string;
    /**
     * 
     * @type {UserAddress}
     * @memberof User
     */
    address?: UserAddress;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    bcAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    bcPrivateKey?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    isProvider?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    isBank?: boolean;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'firstName': !exists(json, 'first_name') ? undefined : (new Date(json['first_name'])),
        'lastName': !exists(json, 'last_name') ? undefined : json['last_name'],
        'verified': !exists(json, 'verified') ? undefined : json['verified'],
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
        'fuid': !exists(json, 'fuid') ? undefined : json['fuid'],
        'accountStatus': !exists(json, 'account_status') ? undefined : json['account_status'],
        'bio': !exists(json, 'bio') ? undefined : json['bio'],
        'photo': !exists(json, 'photo') ? undefined : json['photo'],
        'paystackBankIntegration': !exists(json, 'paystack_bank_integration') ? undefined : UserPaystackBankIntegrationFromJSON(json['paystack_bank_integration']),
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'address': !exists(json, 'address') ? undefined : UserAddressFromJSON(json['address']),
        'bcAddress': !exists(json, 'bc_address') ? undefined : json['bc_address'],
        'bcPrivateKey': !exists(json, 'bc_private_key') ? undefined : json['bc_private_key'],
        'isProvider': !exists(json, 'isProvider') ? undefined : json['isProvider'],
        'isBank': !exists(json, 'isBank') ? undefined : json['isBank'],
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'email': value.email,
        'first_name': value.firstName === undefined ? undefined : (value.firstName.toISOString().substr(0,10)),
        'last_name': value.lastName,
        'verified': value.verified,
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString().substr(0,10)),
        'updated_at': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString().substr(0,10)),
        'fuid': value.fuid,
        'account_status': value.accountStatus,
        'bio': value.bio,
        'photo': value.photo,
        'paystack_bank_integration': UserPaystackBankIntegrationToJSON(value.paystackBankIntegration),
        'phone': value.phone,
        'address': UserAddressToJSON(value.address),
        'bc_address': value.bcAddress,
        'bc_private_key': value.bcPrivateKey,
        'isProvider': value.isProvider,
        'isBank': value.isBank,
    };
}

