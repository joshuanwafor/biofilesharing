/* tslint:disable */
/* eslint-disable */
/**
 * tollgator-core
 * Full api description goes here
 *
 * The version of the OpenAPI document: 1.0
 * Contact: joshuanwafor01@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Product,
    ProductFromJSON,
    ProductToJSON,
    Resource,
    ResourceFromJSON,
    ResourceToJSON,
} from '../models';

export interface DeleteCourseRequest {
    id: string;
}

export interface DeleteResourceRequest {
    id: string;
}

export interface GetCourseRequest {
    id: string;
}

export interface GetResourceRequest {
    id: string;
}

export interface PublishCourseRequest {
    product?: Product;
}

export interface UpdateCourseRequest {
    id: string;
    product?: Product;
}

/**
 * 
 */
export class CourseApi extends runtime.BaseAPI {

    /**
     * delete-course
     */
    async deleteCourseRaw(requestParameters: DeleteCourseRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCourse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/courses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete-course
     */
    async deleteCourse(requestParameters: DeleteCourseRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteCourseRaw(requestParameters, initOverrides);
    }

    /**
     * delete-resource
     */
    async deleteResourceRaw(requestParameters: DeleteResourceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteResource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/resources/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete-resource
     */
    async deleteResource(requestParameters: DeleteResourceRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteResourceRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all taxonomies
     * get-course
     */
    async getCourseRaw(requestParameters: GetCourseRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCourse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/courses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * Returns a list of all taxonomies
     * get-course
     */
    async getCourse(requestParameters: GetCourseRequest, initOverrides?: RequestInit): Promise<Product> {
        const response = await this.getCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of courses
     * get-courses
     */
    async getCoursesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Product>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/courses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductFromJSON));
    }

    /**
     * Returns a list of courses
     * get-courses
     */
    async getCourses(initOverrides?: RequestInit): Promise<Array<Product>> {
        const response = await this.getCoursesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a list resources
     * get-resource
     */
    async getResourceRaw(requestParameters: GetResourceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Resource>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getResource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/resources/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResourceFromJSON(jsonValue));
    }

    /**
     * Returns a list resources
     * get-resource
     */
    async getResource(requestParameters: GetResourceRequest, initOverrides?: RequestInit): Promise<Resource> {
        const response = await this.getResourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Publishes a product
     * publish-course
     */
    async publishCourseRaw(requestParameters: PublishCourseRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Product>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductToJSON(requestParameters.product),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * Publishes a product
     * publish-course
     */
    async publishCourse(requestParameters: PublishCourseRequest = {}, initOverrides?: RequestInit): Promise<Product> {
        const response = await this.publishCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * updates product properties
     * update-course
     */
    async updateCourseRaw(requestParameters: UpdateCourseRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCourse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/courses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductToJSON(requestParameters.product),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * updates product properties
     * update-course
     */
    async updateCourse(requestParameters: UpdateCourseRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateCourseRaw(requestParameters, initOverrides);
    }

}
