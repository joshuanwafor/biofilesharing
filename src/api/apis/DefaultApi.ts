/* tslint:disable */
/* eslint-disable */
/**
 * tollgator-core
 * Full api description goes here
 *
 * The version of the OpenAPI document: 1.0
 * Contact: joshuanwafor01@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Course,
    CourseFromJSON,
    CourseToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    Resource,
    ResourceFromJSON,
    ResourceToJSON,
} from '../models';

export interface GetPublicCoursesRequest {
    course?: Array<Course>;
}

export interface GetPublicResourcesRequest {
    resource?: Array<Resource>;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get courses published
     */
    async getPublicCoursesRaw(requestParameters: GetPublicCoursesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/public/courses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.course.map(CourseToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get courses published
     */
    async getPublicCourses(requestParameters: GetPublicCoursesRequest = {}, initOverrides?: RequestInit): Promise<void> {
        await this.getPublicCoursesRaw(requestParameters, initOverrides);
    }

    /**
     * Get resources
     */
    async getPublicResourcesRaw(requestParameters: GetPublicResourcesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/public/resources`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.resource.map(ResourceToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get resources
     */
    async getPublicResources(requestParameters: GetPublicResourcesRequest = {}, initOverrides?: RequestInit): Promise<void> {
        await this.getPublicResourcesRaw(requestParameters, initOverrides);
    }

    /**
     * initializes payment transaction with paystack
     * initialize-transaction
     */
    async initializeTransactionRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/transaction/initialize`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * initializes payment transaction with paystack
     * initialize-transaction
     */
    async initializeTransaction(initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.initializeTransactionRaw(initOverrides);
        return await response.value();
    }

}
