/* tslint:disable */
/* eslint-disable */
/**
 * tollgator-core
 * Full api description goes here
 *
 * The version of the OpenAPI document: 1.0
 * Contact: joshuanwafor01@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Order,
    OrderFromJSON,
    OrderToJSON,
    Product,
    ProductFromJSON,
    ProductToJSON,
} from '../models';

export interface DeleteProductRequest {
    id: string;
}

export interface GetProductRequest {
    id: string;
}

export interface PublishProductRequest {
    product?: Product;
}

export interface UpdatePrductRequest {
    id: string;
    product?: Product;
}

/**
 * 
 */
export class ProductApi extends runtime.BaseAPI {

    /**
     * delete-product
     */
    async deleteProductRaw(requestParameters: DeleteProductRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProduct.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete-product
     */
    async deleteProduct(requestParameters: DeleteProductRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteProductRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of orders
     * get-orders
     */
    async getOrdersRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Order>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/orders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderFromJSON));
    }

    /**
     * Returns a list of orders
     * get-orders
     */
    async getOrders(initOverrides?: RequestInit): Promise<Array<Order>> {
        const response = await this.getOrdersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all taxonomies
     * get-product
     */
    async getProductRaw(requestParameters: GetProductRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProduct.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * Returns a list of all taxonomies
     * get-product
     */
    async getProduct(requestParameters: GetProductRequest, initOverrides?: RequestInit): Promise<Product> {
        const response = await this.getProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of products
     * get-products
     */
    async getProductsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Product>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductFromJSON));
    }

    /**
     * Returns a list of products
     * get-products
     */
    async getProducts(initOverrides?: RequestInit): Promise<Array<Product>> {
        const response = await this.getProductsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Publishes a product
     * publish-product
     */
    async publishProductRaw(requestParameters: PublishProductRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Product>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductToJSON(requestParameters.product),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * Publishes a product
     * publish-product
     */
    async publishProduct(requestParameters: PublishProductRequest = {}, initOverrides?: RequestInit): Promise<Product> {
        const response = await this.publishProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * updates product properties
     */
    async updatePrductRaw(requestParameters: UpdatePrductRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePrduct.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductToJSON(requestParameters.product),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * updates product properties
     */
    async updatePrduct(requestParameters: UpdatePrductRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updatePrductRaw(requestParameters, initOverrides);
    }

}
