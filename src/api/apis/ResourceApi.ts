/* tslint:disable */
/* eslint-disable */
/**
 * tollgator-core
 * Full api description goes here
 *
 * The version of the OpenAPI document: 1.0
 * Contact: joshuanwafor01@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Resource,
    ResourceFromJSON,
    ResourceToJSON,
} from '../models';

export interface PublishResourceRequest {
    resource?: Resource;
}

export interface UpdateResourceRequest {
    id: string;
    resource?: Resource;
}

/**
 * 
 */
export class ResourceApi extends runtime.BaseAPI {

    /**
     * Returns a list of courses
     * get-courses
     */
    async getResourcesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Resource>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/resources`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResourceFromJSON));
    }

    /**
     * Returns a list of courses
     * get-courses
     */
    async getResources(initOverrides?: RequestInit): Promise<Array<Resource>> {
        const response = await this.getResourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Publishes a resource
     * publish-resource
     */
    async publishResourceRaw(requestParameters: PublishResourceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Resource>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/resources`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResourceToJSON(requestParameters.resource),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResourceFromJSON(jsonValue));
    }

    /**
     * Publishes a resource
     * publish-resource
     */
    async publishResource(requestParameters: PublishResourceRequest = {}, initOverrides?: RequestInit): Promise<Resource> {
        const response = await this.publishResourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * updates resource props
     * update-resource
     */
    async updateResourceRaw(requestParameters: UpdateResourceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateResource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/resources/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ResourceToJSON(requestParameters.resource),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * updates resource props
     * update-resource
     */
    async updateResource(requestParameters: UpdateResourceRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateResourceRaw(requestParameters, initOverrides);
    }

}
