/* tslint:disable */
/* eslint-disable */
/**
 * tollgator-core
 * Full api description goes here
 *
 * The version of the OpenAPI document: 1.0
 * Contact: joshuanwafor01@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Course
 */
export interface Course {
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'publisher_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'source'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'course_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'body'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'abstract'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'status'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Course
     */
    'categories'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'photo'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'cover_photo'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    ''?: string;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    'business_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    'settlement_bank'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    'account_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    'percentage_charge'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    'primary_contact_email'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    'primary_contact_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    'primary_contact_phone'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'reference'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'access_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'authorization_url'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    'parent_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    '_id'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Course}
     * @memberof InlineResponse2002
     */
    'course'?: Course;
    /**
     * 
     * @type {Array<Resource>}
     * @memberof InlineResponse2002
     */
    'resources'?: Array<Resource>;
}
/**
 * 
 * @export
 * @interface InlineResponse400
 */
export interface InlineResponse400 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse400
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse400
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse400
     */
    'data'?: string;
}
/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'order_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'voucher_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'provider_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'publisher_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'user_note'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'service_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'provider_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    ''?: string;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'publisher_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'caption'?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'body'?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'tags'?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'status'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Product
     */
    'categories'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'type'?: ProductTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'quantity'?: number;
}

export const ProductTypeEnum = {
    Service: 'service',
    Product: 'product'
} as const;

export type ProductTypeEnum = typeof ProductTypeEnum[keyof typeof ProductTypeEnum];

/**
 * 
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'publisher_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'type'?: ResourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'body'?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'categories'?: string;
    /**
     * 
     * @type {ResourceAttachment}
     * @memberof Resource
     */
    'attachment'?: ResourceAttachment | null;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'course_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    ''?: string;
}

export const ResourceTypeEnum = {
    Note: 'note',
    Video: 'video',
    Document: 'document',
    Mixed: 'mixed'
} as const;

export type ResourceTypeEnum = typeof ResourceTypeEnum[keyof typeof ResourceTypeEnum];

/**
 * 
 * @export
 * @interface ResourceAttachment
 */
export interface ResourceAttachment {
    /**
     * 
     * @type {string}
     * @memberof ResourceAttachment
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceAttachment
     */
    'file_type'?: ResourceAttachmentFileTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ResourceAttachment
     */
    'source'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceAttachment
     */
    'source_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceAttachment
     */
    'content_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceAttachment
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceAttachment
     */
    ''?: string;
}

export const ResourceAttachmentFileTypeEnum = {
    Video: 'video',
    Audio: 'audio',
    Document: 'document'
} as const;

export type ResourceAttachmentFileTypeEnum = typeof ResourceAttachmentFileTypeEnum[keyof typeof ResourceAttachmentFileTypeEnum];

/**
 * 
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'buyer_email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'buyer_phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'project_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    ' merchant_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'transaction_ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    ' amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'details'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * Unique identifier for the given user.
     * @type {number}
     * @memberof User
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'last_name'?: string;
    /**
     * Set to true if the user\'s email has been verified.
     * @type {boolean}
     * @memberof User
     */
    'verified'?: boolean;
    /**
     * The date that the user was created.
     * @type {string}
     * @memberof User
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'fuid'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'account_status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'bio'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'photo'?: string;
    /**
     * 
     * @type {UserPaystackBankIntegration}
     * @memberof User
     */
    'paystack_bank_integration'?: UserPaystackBankIntegration;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'phone'?: string;
    /**
     * 
     * @type {UserAddress}
     * @memberof User
     */
    'address'?: UserAddress;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'bc_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'bc_private_key'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'isProvider'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'isBank'?: boolean;
}
/**
 * 
 * @export
 * @interface UserAddress
 */
export interface UserAddress {
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    'street'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    'zip_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    ''?: string;
}
/**
 * 
 * @export
 * @interface UserPaystackBankIntegration
 */
export interface UserPaystackBankIntegration {
    /**
     * 
     * @type {string}
     * @memberof UserPaystackBankIntegration
     */
    'business_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserPaystackBankIntegration
     */
    'account_number'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserPaystackBankIntegration
     */
    'percentage_charge'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserPaystackBankIntegration
     */
    'settlement_bank'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserPaystackBankIntegration
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserPaystackBankIntegration
     */
    'bank'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserPaystackBankIntegration
     */
    'integration'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserPaystackBankIntegration
     */
    'domain'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserPaystackBankIntegration
     */
    'subaccount_code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserPaystackBankIntegration
     */
    'is_verified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserPaystackBankIntegration
     */
    'settlement_schedule'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserPaystackBankIntegration
     */
    'active'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserPaystackBankIntegration
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserPaystackBankIntegration
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserPaystackBankIntegration
     */
    'updatedAt'?: string;
}

/**
 * CourseApi - axios parameter creator
 * @export
 */
export const CourseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete-course
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourse: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCourse', 'id', id)
            const localVarPath = `/courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete-resource
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResource: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteResource', 'id', id)
            const localVarPath = `/resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all taxonomies
         * @summary get-course
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourse: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCourse', 'id', id)
            const localVarPath = `/courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of courses
         * @summary get-courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourses: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list resources
         * @summary get-resource
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResource: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getResource', 'id', id)
            const localVarPath = `/resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publishes a product
         * @summary publish-course
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishCourse: async (product?: Product, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(product, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * updates product properties
         * @summary update-course
         * @param {string} id 
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourse: async (id: string, product?: Product, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCourse', 'id', id)
            const localVarPath = `/courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(product, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseApi - functional programming interface
 * @export
 */
export const CourseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary delete-course
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCourse(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourse(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete-resource
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteResource(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResource(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all taxonomies
         * @summary get-course
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourse(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourse(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of courses
         * @summary get-courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourses(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourses(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list resources
         * @summary get-resource
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResource(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResource(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Publishes a product
         * @summary publish-course
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishCourse(product?: Product, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishCourse(product, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * updates product properties
         * @summary update-course
         * @param {string} id 
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCourse(id: string, product?: Product, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCourse(id, product, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CourseApi - factory interface
 * @export
 */
export const CourseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseApiFp(configuration)
    return {
        /**
         * 
         * @summary delete-course
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourse(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCourse(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete-resource
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResource(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteResource(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all taxonomies
         * @summary get-course
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourse(id: string, options?: any): AxiosPromise<Product> {
            return localVarFp.getCourse(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of courses
         * @summary get-courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourses(options?: any): AxiosPromise<Array<Product>> {
            return localVarFp.getCourses(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list resources
         * @summary get-resource
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResource(id: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.getResource(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Publishes a product
         * @summary publish-course
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishCourse(product?: Product, options?: any): AxiosPromise<Product> {
            return localVarFp.publishCourse(product, options).then((request) => request(axios, basePath));
        },
        /**
         * updates product properties
         * @summary update-course
         * @param {string} id 
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourse(id: string, product?: Product, options?: any): AxiosPromise<void> {
            return localVarFp.updateCourse(id, product, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseApi - object-oriented interface
 * @export
 * @class CourseApi
 * @extends {BaseAPI}
 */
export class CourseApi extends BaseAPI {
    /**
     * 
     * @summary delete-course
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public deleteCourse(id: string, options?: AxiosRequestConfig) {
        return CourseApiFp(this.configuration).deleteCourse(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete-resource
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public deleteResource(id: string, options?: AxiosRequestConfig) {
        return CourseApiFp(this.configuration).deleteResource(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all taxonomies
     * @summary get-course
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public getCourse(id: string, options?: AxiosRequestConfig) {
        return CourseApiFp(this.configuration).getCourse(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of courses
     * @summary get-courses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public getCourses(options?: AxiosRequestConfig) {
        return CourseApiFp(this.configuration).getCourses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list resources
     * @summary get-resource
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public getResource(id: string, options?: AxiosRequestConfig) {
        return CourseApiFp(this.configuration).getResource(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publishes a product
     * @summary publish-course
     * @param {Product} [product] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public publishCourse(product?: Product, options?: AxiosRequestConfig) {
        return CourseApiFp(this.configuration).publishCourse(product, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * updates product properties
     * @summary update-course
     * @param {string} id 
     * @param {Product} [product] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public updateCourse(id: string, product?: Product, options?: AxiosRequestConfig) {
        return CourseApiFp(this.configuration).updateCourse(id, product, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get course info
         * @param {string} id 
         * @param {Array<Course>} [course] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicCourseInfo: async (id: string, course?: Array<Course>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPublicCourseInfo', 'id', id)
            const localVarPath = `/public/courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(course, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get courses published
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicCourses: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicResources: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/resources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * initializes payment transaction with paystack
         * @summary initialize-transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initializeTransaction: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transaction/initialize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get course info
         * @param {string} id 
         * @param {Array<Course>} [course] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicCourseInfo(id: string, course?: Array<Course>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicCourseInfo(id, course, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get courses published
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicCourses(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Course>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicCourses(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicResources(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Resource>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicResources(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * initializes payment transaction with paystack
         * @summary initialize-transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initializeTransaction(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initializeTransaction(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get course info
         * @param {string} id 
         * @param {Array<Course>} [course] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicCourseInfo(id: string, course?: Array<Course>, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.getPublicCourseInfo(id, course, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get courses published
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicCourses(options?: any): AxiosPromise<Array<Course>> {
            return localVarFp.getPublicCourses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicResources(options?: any): AxiosPromise<Array<Resource>> {
            return localVarFp.getPublicResources(options).then((request) => request(axios, basePath));
        },
        /**
         * initializes payment transaction with paystack
         * @summary initialize-transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initializeTransaction(options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.initializeTransaction(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get course info
     * @param {string} id 
     * @param {Array<Course>} [course] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPublicCourseInfo(id: string, course?: Array<Course>, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPublicCourseInfo(id, course, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get courses published
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPublicCourses(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPublicCourses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get resources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPublicResources(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPublicResources(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * initializes payment transaction with paystack
     * @summary initialize-transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public initializeTransaction(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).initializeTransaction(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete-product
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProduct', 'id', id)
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of orders
         * @summary get-orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all taxonomies
         * @summary get-product
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProduct', 'id', id)
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of products
         * @summary get-products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publishes a product
         * @summary publish-product
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishProduct: async (product?: Product, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(product, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * updates product properties
         * @param {string} id 
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrduct: async (id: string, product?: Product, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePrduct', 'id', id)
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(product, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary delete-product
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProduct(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProduct(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of orders
         * @summary get-orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrders(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Order>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrders(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all taxonomies
         * @summary get-product
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProduct(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProduct(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of products
         * @summary get-products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProducts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProducts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Publishes a product
         * @summary publish-product
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishProduct(product?: Product, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishProduct(product, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * updates product properties
         * @param {string} id 
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrduct(id: string, product?: Product, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrduct(id, product, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * 
         * @summary delete-product
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteProduct(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of orders
         * @summary get-orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(options?: any): AxiosPromise<Array<Order>> {
            return localVarFp.getOrders(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all taxonomies
         * @summary get-product
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct(id: string, options?: any): AxiosPromise<Product> {
            return localVarFp.getProduct(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of products
         * @summary get-products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts(options?: any): AxiosPromise<Array<Product>> {
            return localVarFp.getProducts(options).then((request) => request(axios, basePath));
        },
        /**
         * Publishes a product
         * @summary publish-product
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishProduct(product?: Product, options?: any): AxiosPromise<Product> {
            return localVarFp.publishProduct(product, options).then((request) => request(axios, basePath));
        },
        /**
         * updates product properties
         * @param {string} id 
         * @param {Product} [product] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrduct(id: string, product?: Product, options?: any): AxiosPromise<void> {
            return localVarFp.updatePrduct(id, product, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @summary delete-product
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public deleteProduct(id: string, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).deleteProduct(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of orders
     * @summary get-orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getOrders(options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).getOrders(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all taxonomies
     * @summary get-product
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProduct(id: string, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).getProduct(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of products
     * @summary get-products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProducts(options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).getProducts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publishes a product
     * @summary publish-product
     * @param {Product} [product] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public publishProduct(product?: Product, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).publishProduct(product, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * updates product properties
     * @param {string} id 
     * @param {Product} [product] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public updatePrduct(id: string, product?: Product, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).updatePrduct(id, product, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ResourceApi - axios parameter creator
 * @export
 */
export const ResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of courses
         * @summary get-courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResources: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/resources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publishes a resource
         * @summary publish-resource
         * @param {Resource} [resource] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishResource: async (resource?: Resource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/resources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * updates resource props
         * @summary update-resource
         * @param {string} id 
         * @param {Resource} [resource] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResource: async (id: string, resource?: Resource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateResource', 'id', id)
            const localVarPath = `/resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourceApi - functional programming interface
 * @export
 */
export const ResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a list of courses
         * @summary get-courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResources(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Resource>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResources(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Publishes a resource
         * @summary publish-resource
         * @param {Resource} [resource] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishResource(resource?: Resource, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishResource(resource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * updates resource props
         * @summary update-resource
         * @param {string} id 
         * @param {Resource} [resource] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateResource(id: string, resource?: Resource, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateResource(id, resource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ResourceApi - factory interface
 * @export
 */
export const ResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResourceApiFp(configuration)
    return {
        /**
         * Returns a list of courses
         * @summary get-courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResources(options?: any): AxiosPromise<Array<Resource>> {
            return localVarFp.getResources(options).then((request) => request(axios, basePath));
        },
        /**
         * Publishes a resource
         * @summary publish-resource
         * @param {Resource} [resource] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishResource(resource?: Resource, options?: any): AxiosPromise<Resource> {
            return localVarFp.publishResource(resource, options).then((request) => request(axios, basePath));
        },
        /**
         * updates resource props
         * @summary update-resource
         * @param {string} id 
         * @param {Resource} [resource] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResource(id: string, resource?: Resource, options?: any): AxiosPromise<void> {
            return localVarFp.updateResource(id, resource, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResourceApi - object-oriented interface
 * @export
 * @class ResourceApi
 * @extends {BaseAPI}
 */
export class ResourceApi extends BaseAPI {
    /**
     * Returns a list of courses
     * @summary get-courses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public getResources(options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).getResources(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publishes a resource
     * @summary publish-resource
     * @param {Resource} [resource] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public publishResource(resource?: Resource, options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).publishResource(resource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * updates resource props
     * @summary update-resource
     * @param {string} id 
     * @param {Resource} [resource] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public updateResource(id: string, resource?: Resource, options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).updateResource(id, resource, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TaxonomyApi - axios parameter creator
 * @export
 */
export const TaxonomyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of all taxonomies
         * @summary get-taxonomies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxonomies: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/taxonomies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaxonomyApi - functional programming interface
 * @export
 */
export const TaxonomyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaxonomyApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a list of all taxonomies
         * @summary get-taxonomies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaxonomies(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse2001>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTaxonomies(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaxonomyApi - factory interface
 * @export
 */
export const TaxonomyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaxonomyApiFp(configuration)
    return {
        /**
         * Returns a list of all taxonomies
         * @summary get-taxonomies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxonomies(options?: any): AxiosPromise<Array<InlineResponse2001>> {
            return localVarFp.getTaxonomies(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaxonomyApi - object-oriented interface
 * @export
 * @class TaxonomyApi
 * @extends {BaseAPI}
 */
export class TaxonomyApi extends BaseAPI {
    /**
     * Returns a list of all taxonomies
     * @summary get-taxonomies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxonomyApi
     */
    public getTaxonomies(options?: AxiosRequestConfig) {
        return TaxonomyApiFp(this.configuration).getTaxonomies(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Updates user bank account
         * @summary add-bank-account
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBankAccount: async (inlineObject?: InlineObject, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/bank-account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Queries user auth token
         * @summary get-user-auth-token
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAuthToken: async (inlineObject1?: InlineObject1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds and returns a user profile by id
         * @summary get-user-by-id
         * @param {number} userId Id of an existing user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserById', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns user profile
         * @summary get-user-profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all user sales
         * @summary get-account-sales
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSales: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/my-sales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get all users available in the system
         * @summary get-users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates user profile
         * @summary update-user-profile
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfile: async (user?: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Updates user bank account
         * @summary add-bank-account
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBankAccount(inlineObject?: InlineObject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBankAccount(inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Queries user auth token
         * @summary get-user-auth-token
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAuthToken(inlineObject1?: InlineObject1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineObject1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserAuthToken(inlineObject1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Finds and returns a user profile by id
         * @summary get-user-by-id
         * @param {number} userId Id of an existing user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns user profile
         * @summary get-user-profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all user sales
         * @summary get-account-sales
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserSales(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Order>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserSales(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get all users available in the system
         * @summary get-users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates user profile
         * @summary update-user-profile
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserProfile(user?: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserProfile(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Updates user bank account
         * @summary add-bank-account
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBankAccount(inlineObject?: InlineObject, options?: any): AxiosPromise<User> {
            return localVarFp.addBankAccount(inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         * Queries user auth token
         * @summary get-user-auth-token
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAuthToken(inlineObject1?: InlineObject1, options?: any): AxiosPromise<InlineObject1> {
            return localVarFp.getUserAuthToken(inlineObject1, options).then((request) => request(axios, basePath));
        },
        /**
         * Finds and returns a user profile by id
         * @summary get-user-by-id
         * @param {number} userId Id of an existing user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(userId: number, options?: any): AxiosPromise<User> {
            return localVarFp.getUserById(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns user profile
         * @summary get-user-profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile(options?: any): AxiosPromise<User> {
            return localVarFp.getUserProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all user sales
         * @summary get-account-sales
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSales(options?: any): AxiosPromise<Array<Order>> {
            return localVarFp.getUserSales(options).then((request) => request(axios, basePath));
        },
        /**
         * get all users available in the system
         * @summary get-users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<Array<User>> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates user profile
         * @summary update-user-profile
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfile(user?: User, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserProfile(user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Updates user bank account
     * @summary add-bank-account
     * @param {InlineObject} [inlineObject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public addBankAccount(inlineObject?: InlineObject, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).addBankAccount(inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Queries user auth token
     * @summary get-user-auth-token
     * @param {InlineObject1} [inlineObject1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserAuthToken(inlineObject1?: InlineObject1, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserAuthToken(inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finds and returns a user profile by id
     * @summary get-user-by-id
     * @param {number} userId Id of an existing user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserById(userId: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserById(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns user profile
     * @summary get-user-profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserProfile(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all user sales
     * @summary get-account-sales
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserSales(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserSales(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get all users available in the system
     * @summary get-users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates user profile
     * @summary update-user-profile
     * @param {User} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUserProfile(user?: User, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).updateUserProfile(user, options).then((request) => request(this.axios, this.basePath));
    }
}


